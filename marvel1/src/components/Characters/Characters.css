/* В Characters.js стр.64-77- классы прописали вручную */

.characters-wrapper {
  /* Задаем ПОВЕРХ основного контента */
  position: fixed;
  top: 0;
  left: 0;
  /* _____Окно НА ВЕСЬ ЭКРАН________________________ */
  width: 100%;
  height: 100vh;
  backdrop-filter: blur(3px);/* ЗАТЕНЯЕМ -ЗАДНИЙ ФОН  */
}

.characters__container {
  /* Задаем ПОВЕРХ основного контента - ПО ЦЕНТРУ СТРАНИЦИ - РАЗМ(80%-от characters-wrapper НА 600px) */
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
/* Задаем размеры рамки */
  max-width: 1200px;
  width: 80%;
  height: 600px;

  margin: auto; /* иначе НЕ ОТЦЕНТРУЕТСЯ!!!  */
  padding: 20px;

  border: 1px solid green;

  overflow: auto; /* Тогда картинки - Войдут ВНУТРЬ РАМКИ - и появится СКРОЛ */

  background-color: var(--color-light);
  
  /* __________flex container____________________________ */
  display: flex;
  flex-wrap: wrap; /*Flex-элементы ПЕРЕНОСЯТСЯ, располагаясь в
  несколько ГОРИЗОНТАЛЬНЫХ РЯДОВ (если не помещаются в один ряд)
  в направлении слева направо*/
}

.characters__item {
  width: 200px;
  height: 250px;
  margin: 10px;

  border: 1px solid blue;
  box-shadow: var(--box-shadow);
  background-color: white;

         /*Изначально ВНУТРИ <li>-ВСЕ эл-ты СТРОЧНЫЕ (<span> и <img>) - Структурируем - Название комикса и Картинку - ВНУТРИ ОТДЕЛЬНОГО ЭЛЕМЕНТА__________________________________________  */

 display: flex; /* Название И Картинка - сначала В ЛИНИЮ */
 flex-direction: column; /* теперь Название СВЕРХУ НАД Картинкой */
 justify-content: space-between; /* Названия - в ряду занимаютют -   ОДИНАКОВОЕ ПО ВЫСОТЕ МЕСТО (по высоте самого длинного названия) */
}

.characters__img {
  width: 100%; /* иначе КАРТИНКИ будут выходить ЗА РАМКИ  */
}

.characters__name {
  padding: 10px;

  white-space: nowrap;/* Длинные названия - ПЕРЕНОСИТСЯ НЕ БУДУТ - все в одну строку */

  overflow: hidden; /* Все, что будет длиннее картинки - обрезаем (Динные имена - ОБРЕЗАЕМ) */
  
  text-overflow: ellipsis; /* если Текст ДЛИННЫЙ- в КОНЦЕ МНОГОТОЧИЕ */

  text-align: center;
}
/*______________________ Дополнительные (вторые) классы __________________  */

.img-contain {
  display: block;
/*св-во object-fit                                                            используется, чтобы указать, как  <img> или <video> нужно ИЗМЕНИТЬ РАЗМЕР, (когда для элемента ЗАДАНЫ - ШИРИНА  и ВЫСОТА) чтобы соответствовать его  контейнеру - в пер. с анг. - подгонка объекта. 
________________________________________________________________

Свойство object-position используется В СЧЕТАНИИ С с object-fit                 и задаёт положение содержимого замещаемого элемента внутри контейнера относительно координатных осей X и Y. Значение по умолчанию 50% 50%. Свойство анимируется. Не наследуется.
   (left top, left center, left bottom, right top, right center, right bottom,
center top, center center, center bottom) */
  
  object-fit: contain;/*чтобы картинка полностью вмещалась в ячейку*/ 

  object-position: center;
}

.img-cover {
  display: block;
  
  object-fit: cover; /* это обрезает стороны изображения, сохраняя пропорции - При изменении размеров экрана */

  object-position: center;  
}

/*____ Стилизуем КНОПКУ - БЕЛЫЙ КРЕСТИК (Characters.js - стр.69-72)_____ */

.characters__close {
  /* Задаем размеры КРЕСТИКА - иначе он БУДЕТ НЕВИДЕН */
  width: 35px;
  height: 35px;

  /* Изначально крести к слева - чтобы ПЕРЕМЕСТИТЬ ЕГО НА ПРАВО */
  position: absolute;
  top: 20px;
  right: 20px;
}


.btn { /* Задаем ВТОРОЙ КЛАСС - ДЛЯ КНОПКИ- КРЕСТИКА */
  border: none; /* Граници - нет */
  outline: none; /* После нажатия - НЕТ КОНТУРА РИС. */
  background: none; /* ФОн - Прозрачный */
  cursor: pointer; /* Курсор - Рука */
}

.bg-contain {
  background-size: contain;/*Contain - масштабирует изображение таким образом, чтобы оно полностью заполнило блок, при этом к двум его сторонам
  изображение будет прилегать обязательно.
  
  Cover - масштабирует изображение С СОХРАНЕНИЕМ ПРОПОРЦИЙ таким образом,
        чтобы картинка ЦЕЛИКОМ ПОМЕСТИЛАСЬ ВНУТРЬ БЛОКА.*/

  background-repeat: no-repeat;/* не повторять рис, и размещает его один раз по его размеру */

  background-position: center center;/* НАЧАЛЬНОЕ ПОЛОЖЕНИЕ фонового изображения, установл. с помощью background-image. (Characters.js - стр.71)*/
}
/*__________________________________________________________________  */


